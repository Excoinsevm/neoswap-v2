{
	"compiler": {
		"version": "0.8.23+commit.f704f362"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "AddressEmptyCode",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "AddressInsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedInnerCall",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "SafeERC20FailedOperation",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "Burn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountBorrowed",
						"type": "uint256"
					}
				],
				"name": "LoanIssued",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "Mint",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0In",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1In",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0Out",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1Out",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "Swap",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint112",
						"name": "reserve0",
						"type": "uint112"
					},
					{
						"indexed": false,
						"internalType": "uint112",
						"name": "reserve1",
						"type": "uint112"
					}
				],
				"name": "Sync",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "CALLBACK_SUCCESS",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "FEE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MINIMUM_LIQUIDITY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PERMIT_TYPEHASH",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "burn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "factory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "flashFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC3156FlashBorrower",
						"name": "receiver",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "flashLoan",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getReserves",
				"outputs": [
					{
						"internalType": "uint112",
						"name": "_reserve0",
						"type": "uint112"
					},
					{
						"internalType": "uint112",
						"name": "_reserve1",
						"type": "uint112"
					},
					{
						"internalType": "uint32",
						"name": "_blockTimestampLast",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token0",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_token1",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "kLast",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "maxFlashLoan",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "mint",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "liquidity",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "price0CumulativeLast",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "price1CumulativeLast",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "skim",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "supportedTokens",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount0Out",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1Out",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "swap",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sync",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token0",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token1",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This contract is a Uniswap V2 pair for two tokens, implementing ERC20 and flash loan functionality.",
			"errors": {
				"AddressEmptyCode(address)": [
					{
						"details": "There's no code at `target` (it is not a contract)."
					}
				],
				"AddressInsufficientBalance(address)": [
					{
						"details": "The ETH balance of the account is not enough to perform the operation."
					}
				],
				"FailedInnerCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"SafeERC20FailedOperation(address)": [
					{
						"details": "An operation with an ERC20 token failed."
					}
				]
			},
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
				},
				"Burn(address,uint256,uint256,address)": {
					"details": "Emitted when `amount0` and `amount1` are burned from `sender` to `to`",
					"params": {
						"amount0": "The amount of token0 burned",
						"amount1": "The amount of token1 burned",
						"sender": "The address of the account burning the tokens",
						"to": "The address of the account receiving the tokens"
					}
				},
				"LoanIssued(address,address,uint256)": {
					"params": {
						"amountBorrowed": "The amount of tokens that were borrowed",
						"borrower": "The address of the borrower",
						"token": "The address of the token that was borrowed"
					}
				},
				"Mint(address,uint256,uint256)": {
					"details": "Emitted when `amount0` and `amount1` are minted to `sender`",
					"params": {
						"amount0": "The amount of token0 minted",
						"amount1": "The amount of token1 minted",
						"sender": "The address of the account minting the tokens"
					}
				},
				"Swap(address,uint256,uint256,uint256,uint256,address)": {
					"details": "Emitted when a swap occurs",
					"params": {
						"amount0In": "The amount of token0 input",
						"amount0Out": "The amount of token0 output",
						"amount1In": "The amount of token1 input",
						"amount1Out": "The amount of token1 output",
						"sender": "The address of the account initiating the swap",
						"to": "The address of the account receiving the output"
					}
				},
				"Sync(uint112,uint112)": {
					"details": "Emitted when reserves are synced",
					"params": {
						"reserve0": "The reserve of token0",
						"reserve1": "The reserve of token1"
					}
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
				}
			},
			"kind": "dev",
			"methods": {
				"approve(address,uint256)": {
					"details": "Approve `spender` to transfer `value` tokens on behalf of `msg.sender`",
					"params": {
						"spender": "The address which will spend the funds.",
						"value": "The amount of tokens to be spent."
					}
				},
				"burn(address)": {
					"params": {
						"to": "The address to send the underlying assets to"
					},
					"returns": {
						"amount0": "The amount of the first token returned",
						"amount1": "The amount of the second token returned"
					}
				},
				"flashFee(address,uint256)": {
					"details": "The fee to be charged for a given loan.",
					"params": {
						"amount": "The amount of tokens lent.",
						"token": "The loan currency."
					},
					"returns": {
						"_0": "The amount of `token` to be charged for the loan, on top of the returned principal."
					}
				},
				"flashLoan(address,address,uint256,bytes)": {
					"details": "Loan `amount` tokens to `receiver`, and takes it back plus a `flashFee` after the callback.",
					"params": {
						"amount": "The amount of tokens lent.",
						"data": "A data parameter to be passed on to the `receiver` for any custom use.",
						"receiver": "The contract receiving the tokens, needs to implement the `onFlashLoan(address user, uint256 amount, uint256 fee, bytes calldata)` interface.",
						"token": "The loan currency."
					}
				},
				"getReserves()": {
					"returns": {
						"_blockTimestampLast": "The timestamp of the last block when reserves were updated",
						"_reserve0": "The reserve of the first token",
						"_reserve1": "The reserve of the second token"
					}
				},
				"initialize(address,address)": {
					"params": {
						"_token0": "The address of the first token",
						"_token1": "The address of the second token"
					}
				},
				"maxFlashLoan(address)": {
					"details": "The amount of currency available to be lent.",
					"params": {
						"token": "The loan currency."
					},
					"returns": {
						"_0": "The amount of `token` that can be borrowed."
					}
				},
				"mint(address)": {
					"params": {
						"to": "The address to mint LP tokens to"
					},
					"returns": {
						"liquidity": "The amount of LP tokens minted"
					}
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "Allows `spender` to spend `value` tokens on behalf of `owner`",
					"params": {
						"deadline": "Time after which this permission to spend is no longer valid",
						"owner": "The address which owns the funds.",
						"r": "ECDSA signature parameter r.",
						"s": "ECDSA signature parameter s.",
						"spender": "The address which will spend the funds.",
						"v": "ECDSA signature parameter v.",
						"value": "The amount of tokens to be spent."
					}
				},
				"skim(address)": {
					"params": {
						"to": "The address to send the tokens to"
					}
				},
				"swap(uint256,uint256,address)": {
					"params": {
						"amount0Out": "The amount of the first token to swap out",
						"amount1Out": "The amount of the second token to swap out",
						"to": "The address to send the swapped tokens to"
					}
				},
				"transfer(address,uint256)": {
					"details": "Transfer `value` tokens from `msg.sender` to `to`",
					"params": {
						"to": "The address to transfer to.",
						"value": "The amount of tokens to be transferred."
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfer `value` tokens from `from` to `to`",
					"params": {
						"from": "The address to transfer from.",
						"to": "The address to transfer to.",
						"value": "The amount of tokens to be transferred."
					}
				}
			},
			"stateVariables": {
				"MINIMUM_LIQUIDITY": {
					"details": "Returns the minimum liquidity",
					"return": "The minimum liquidity",
					"returns": {
						"_0": "The minimum liquidity"
					}
				},
				"factory": {
					"details": "Returns the factory address",
					"return": "The factory address",
					"returns": {
						"_0": "The factory address"
					}
				},
				"kLast": {
					"details": "Returns the last k value",
					"return": "The last k value",
					"returns": {
						"_0": "The last k value"
					}
				},
				"price0CumulativeLast": {
					"details": "Returns the last cumulative price of token0",
					"return": "The last cumulative price of token0",
					"returns": {
						"_0": "The last cumulative price of token0"
					}
				},
				"price1CumulativeLast": {
					"details": "Returns the last cumulative price of token1",
					"return": "The last cumulative price of token1",
					"returns": {
						"_0": "The last cumulative price of token1"
					}
				},
				"token0": {
					"details": "Returns the address of token0",
					"return": "The address of token0",
					"returns": {
						"_0": "The address of token0"
					}
				},
				"token1": {
					"details": "Returns the address of token1",
					"return": "The address of token1",
					"returns": {
						"_0": "The address of token1"
					}
				}
			},
			"title": "UniswapV2Pair",
			"version": 1
		},
		"userdoc": {
			"events": {
				"LoanIssued(address,address,uint256)": {
					"notice": "Emitted when a loan is issued"
				}
			},
			"kind": "user",
			"methods": {
				"burn(address)": {
					"notice": "Burns LP tokens and returns the underlying assets"
				},
				"getReserves()": {
					"notice": "Returns the current reserves of the pair"
				},
				"initialize(address,address)": {
					"notice": "Initializes the pair contract with two tokens"
				},
				"mint(address)": {
					"notice": "Mints new LP tokens to the provided address"
				},
				"skim(address)": {
					"notice": "Transfers the difference between the current balance and the reserves to the provided address"
				},
				"swap(uint256,uint256,address)": {
					"notice": "Swaps an amount of one token for the other"
				},
				"sync()": {
					"notice": "Updates the reserves to the current balances"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/UniswapV2Pair.sol": "UniswapV2Pair"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol": {
			"keccak256": "0x9f9e6dba43fe0775c400aa384375f1f503efaf733a40187169fdfc195f5ea6fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://ff5fe5fac5e4ecbf9fcd34c42b6d58d1af150263dfe07bc6785a59329dd1e475",
				"dweb:/ipfs/QmX1EhNKKL6n6RFrLLAYh6Uf3itkozjSHyGFs9DqwW4Rzy"
			]
		},
		"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol": {
			"keccak256": "0x95d9eb59f21e885406d0e28b0510f9e1a0e7b4abe6636b5c966682927c65cfdd",
			"license": "MIT",
			"urls": [
				"bzz-raw://a1cbff4d620ab51abe0c4ede9e4395bae53bcc3a7edd74e0eb08d7bdef155306",
				"dweb:/ipfs/QmQcnBK28GDH4S5uXWqAcdRY1KcusXH4CxAqp87rYLir6n"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
				"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
				"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"src/UniswapV2ERC20.sol": {
			"keccak256": "0xc803eb04b02fd8a7d7cdad8fc1a0bea08f72ae5df8d3eac7518af06e291cbd8d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://c81dc5e3f58977d98588734bdf20f9867586adeca1a0befc270a25daea482bfe",
				"dweb:/ipfs/QmXWwAXTdFWBz91cfAZ1NiEtZcoFGSuc99HbbwFU1z8z1r"
			]
		},
		"src/UniswapV2Pair.sol": {
			"keccak256": "0x7ded74bedc5dc6008599f85c9f26af40e6b1699a5beb804b129c0105e1b88141",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://6276a60fdf90ba53ded80664bcd22f29bccc44b9c8d795605572172ec388f8e2",
				"dweb:/ipfs/Qmcq5hCrffmVeFbVfMHwb8HDZLzyaMncw78cuwCogi43z4"
			]
		},
		"src/interfaces/IUniswapV2ERC20.sol": {
			"keccak256": "0xfd71b1c4acc0b20026a03c4dfdd258975c041ba934310f02114afbfb40f0a616",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://3286a3400798b899695f5d90a0f31954ec1894458319c607b4f3bec7cd3821c1",
				"dweb:/ipfs/Qmb5hDxaxtnPRCCHREnvHNCSPw1NdirUvv97ES9Z7pTMpE"
			]
		},
		"src/interfaces/IUniswapV2Factory.sol": {
			"keccak256": "0x4058fcab5acbbea286f93aa0524c1ab4ac789f8a9ef0642eef692510467836bb",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://9b6bbf41ffc230c7cdeb7ccbf44f0536ecc440e46892877be2ffea604391d311",
				"dweb:/ipfs/QmSjrt3yJgHbbxstWoLueBmPRdKL5WDZ1ktfXJ7U2ATmEj"
			]
		},
		"src/interfaces/IUniswapV2Pair.sol": {
			"keccak256": "0x1fe274f78c1287e57ced5388bc6e078670fbcd16cf1dd8d6454588b9d0f5e878",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://6d6c9135e85e54d2ff45cc23c4fe7372c991e4b713904d0de0d6d81f16c8d438",
				"dweb:/ipfs/QmSJLbzSV9tHXSi1LBVnzJvM8CkSidC8q99SkvKeFEUZ65"
			]
		},
		"src/libraries/Math.sol": {
			"keccak256": "0x4ff71b8a20084c885ea3a5d0aabd2254fc39922438ee089e11e290770c822706",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8cfc33082d5f78e85ec0775d3d07eb57f045cd979a2b42600c78800d1d145c07",
				"dweb:/ipfs/QmQ9LXJNUV7BfhvwPxePec2oP38Zx3oLUq3Vf8wggzAdfy"
			]
		},
		"src/libraries/UQ112x112.sol": {
			"keccak256": "0x1c712e0e9ed1cb8588e731d0039de2a15ad83c63de145f987ead919807254f55",
			"urls": [
				"bzz-raw://f2dfa244407251a3add5409fdda3a37c6298e0415c0e7554350cf73d1e5e0b87",
				"dweb:/ipfs/QmcvByc1tWoCynoDz3i7vJevkZuzt6LApv5U1GkjEArwSE"
			]
		}
	},
	"version": 1
}